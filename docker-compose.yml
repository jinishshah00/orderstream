services:
  zookeeper:
    image: bitnami/zookeeper:3.9
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_4LW_COMMANDS_WHITELIST=ruok
    ports: ["2181:2181"]
    healthcheck:
      test: ["CMD-SHELL", "bash -c 'exec 3<>/dev/tcp/127.0.0.1/2181 && printf ruok >&3 && dd bs=1 count=4 <&3 2>/dev/null | grep imok'"]
      interval: 10s
      timeout: 5s
      retries: 12
    restart: unless-stopped

  kafka:
    image: bitnami/kafka:3.7
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      zookeeper:
        condition: service_healthy
    ports: ["9092:9092"]
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 12
    restart: unless-stopped

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    ports: ["8080:8080"]
    restart: unless-stopped

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: orders
    volumes:
      - ./db/init_inventory.sql:/docker-entrypoint-initdb.d/10-init_inventory.sql:ro
    ports: ["5432:5432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d orders -h 127.0.0.1"]
      interval: 5s
      timeout: 5s
      retries: 20
    restart: unless-stopped

  redis:
    image: redis:7
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  api-gateway:
    build: ./packages/api-gateway
    environment:
      - KAFKA_BROKERS=kafka:9092
      - PORT=3000
      - POSTGRES_URL=postgres://app:app@postgres:5432/orders
      - REDIS_URL=redis://redis:6379
      - OTEL_SERVICE_NAME=api-gateway
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4318
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports: ["3000:3000"]
    restart: unless-stopped

  order-service:
    build: ./packages/order-service
    environment:
      - KAFKA_BROKERS=kafka:9092
      - POSTGRES_URL=postgres://app:app@postgres:5432/orders
      - OTEL_SERVICE_NAME=order-service         
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4318
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped

  payment-worker:
    build: ./packages/payment-worker
    environment:
      - KAFKA_BROKERS=kafka:9092
      - PAYMENT_SUCCESS_RATE=1.0
      - PAYMENT_THROW_RATE=0.05
      - OTEL_SERVICE_NAME=payment-worker          
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4318
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped

  inventory-worker:
    build: ./packages/inventory-worker
    environment:
      - KAFKA_BROKERS=kafka:9092
      - POSTGRES_URL=postgres://app:app@postgres:5432/orders
      - OTEL_SERVICE_NAME=inventory-worker       
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4318
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:1.57
    environment:
      - COLLECTOR_OTLP_ENABLED=true      # <-- turns on 4317/4318 inside the container
    ports:
      - "16686:16686"                     # Jaeger UI
      # - "4318:4318"                    # optional: expose OTLP HTTP to host
    restart: unless-stopped
